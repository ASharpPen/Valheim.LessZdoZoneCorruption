#define Verbose

using HarmonyLib;

namespace LessZdoCorruption.Fixes;

/// <summary>
/// Attempts to clean up records generated by raids, when the raid is finished.
/// </summary>
internal static class RandEventSpawnSystemCleanup
{
    internal static void Enable(Harmony harmony)
    {
        var onDeactivate = AccessTools.Method(typeof(RandomEvent), nameof(RandomEvent.OnDeactivate));
        var cleanup = AccessTools.Method(typeof(RandEventSpawnSystemCleanup), nameof(CleanupSpawnSystemRecords));

        harmony.Patch(
            onDeactivate,
            postfix: new HarmonyMethod(cleanup));

#if DEBUG && Verbose
        harmony.Patch(
            AccessTools.Method(typeof(SpawnSystem), nameof(SpawnSystem.UpdateSpawning)),
            postfix: new HarmonyMethod(AccessTools.Method(typeof(RandEventSpawnSystemCleanup), nameof(DebugSpawnSystemZdoSize))));
#endif
    }

    private static void CleanupSpawnSystemRecords(RandomEvent __instance, bool end)
    {
        try
        {
            if (!end)
            {
                return;
            }

            foreach (var spawnSystem in SpawnSystem.m_instances)
            {
                if (spawnSystem.m_nview.IsOwner())
                {
                    Cleanup(spawnSystem, __instance);
                }
            }
        }
        catch (Exception e)
        {
            Log.Warning("Error while attempting to clean up the raid entries added to SpawnSystem ZDO's.", e);
        }
    }

    private static void Cleanup(SpawnSystem spawnSystem, RandomEvent randEvent)
    {
        if (randEvent.m_spawn is null ||
            randEvent.m_spawn.Count == 0)
        {
            return;
        }

        var znetView = spawnSystem.m_nview;

        if (znetView == false ||
            znetView == null)
        {
            return;
        }

        var zdo = znetView.GetZDO();

        if (zdo is null)
        {
            return;
        }

        for(int i = 0; i < randEvent.m_spawn.Count; ++i)
        {
            var spawn = randEvent.m_spawn[i];

            if (spawn is null ||
                spawn.m_prefab == false ||
                spawn.m_prefab == null)
            {
                continue;
            }

            string spawnEntry = $"e_{spawn.m_prefab.name}{i + 1}";
            int hash = spawnEntry.GetStableHashCode();

            if (zdo.GetLong(hash, 0) != 0)
            {
                zdo.RemoveLong(hash);
            }
        }
    }

#if DEBUG
    private static void DebugSpawnSystemZdoSize(SpawnSystem __instance)
    {
        var zdo = __instance.m_nview.GetZDO();

        int count = 0;

        if (ZDOExtraData.s_longs.TryGetValue(zdo.m_uid, out var data))
        {
            count = data.Count;
        }

        Log.Warning($"" +
            $"SpawnSystem [{zdo.m_position.x},{zdo.m_position.z}]: " +
            $"Longs ({count})");
    }
#endif

}
